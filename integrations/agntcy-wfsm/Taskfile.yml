# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true

vars:
  AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "" }}'
  AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "" }}'
  AZURE_OPENAI_API_VERSION: '{{ .AZURE_OPENAI_API_VERSION | default "2025-02-01-preview" }}'

  ARCH:
    sh: |
      if [ "$ARCH" == "" ]; then
        uname -m
      else
        printf $ARCH
      fi
  OS:
    sh: |
      if [ "$OS" == "" ]; then
        uname -s
      else
        printf $OS
      fi
  WFSM_BIN_PATH:
    sh: |
      if [ "$WFSM_BIN_PATH" == "" ]; then
        printf "{{.TASKFILE_DIR}}/tools"
      else
        printf $WFSM_BIN_PATH
      fi

includes:
  parent:
    taskfile: ../Taskfile.yml
    dir: ..
    excludes: [ default ]
    vars:
      KIND_CLUSTER_NAME: '{{ .KIND_CLUSTER_NAME }}'
      WFSM_BIN_VERSION: '{{ .WFSM_BIN_VERSION }}'
      DIRCTL_BIN_PATH: '{{ .DIRCTL_BIN_PATH }}'
      DIRCTL_BIN_VERSION: '{{ .DIRCTL_BIN_VERSION }}'

tasks:
  wfsm:install:yq:
    desc: Installs the yq tool
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'
      YQ_VERSION: 'v4.45.4'
      YQ_BINARY:
        sh: |
          if [[ "{{ .ARCH}}" == "x86_64" && "{{lower .OS}}" == "linux" ]]; then
            echo 'yq_{{ lower .OS }}_amd64'
          else
            echo 'yq_{{ lower .OS }}_{{ .ARCH}}'
          fi
        
    cmds:
      - echo "Installing yq ..."
      - curl -L -o "{{ .TMP_PATH}}/yq" "https://github.com/mikefarah/yq/releases/download/{{.YQ_VERSION}}/{{ .YQ_BINARY}}" && chmod +x "{{ .TMP_PATH}}/yq"

  wfsm:install:jq:
    desc: Installs the jq tool
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'
      JQ_VERSION: 'jq-1.7.1'

      JQ_BINARY:
        sh: |
          if [[ "{{ .ARCH}}" == "arm64" && "{{lower .OS}}" == "darwin" ]]; then
            echo 'jq-macos-{{ .ARCH}}'
          elif [[ "{{ .ARCH}}" == "x86_64" && "{{lower .OS}}" == "linux" ]]; then
            echo 'jq-{{ lower .OS}}-amd64'
          else
            echo 'jq-{{ lower .OS}}-{{ .ARCH}}'
          fi

    cmds:
      - echo "Installing jq"
      - curl -L -o "{{ .TMP_PATH}}/jq" "https://github.com/jqlang/jq/releases/download/{{ .JQ_VERSION }}/{{ .JQ_BINARY}}" && chmod +x "{{ .TMP_PATH}}/jq"


  wfsm:test:setup:
    desc: Sets up prerequisites for testing the wfsm
    cmds:
      - cmd: echo "Setting up wfsm test environment"
      - cmd: echo "Setting up kind cluster..."
      - task: parent:kind:create
      - cmd: echo "Setting up directory..."
      - task: parent:directory:test-env:deploy
      - task: parent:directory:download:dirctl-bin
      - task: wfsm:install:wfsm-bin
      - task: wfsm:install:yq
      - task: wfsm:install:jq

  wfsm:test:teardown:
    desc: Cleans up after testing the wfsm
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'

    cmds:
      - cmd: echo "Cleaning up wfsm test environment"
      - cmd: rm -rf "{{ .TMP_PATH}}/manifest.json"
      - cmd: rm -rf "{{ .TMP_PATH}}/digest.json"
      - cmd: rm -rf "{{ .TMP_PATH}}/wfsm"
      - cmd: rm -rf "{{ .TMP_PATH}}/yq"
      - cmd: rm -rf "{{ .TMP_PATH}}/jq"
      - cmd: rm -rf "{{ .TMP_PATH}}/dirctl"
      - task: parent:directory:test-env:cleanup
      - task: parent:directory:k8s:port-forward:teardown
      - task: parent:kind:destroy

  wfsm:install:wfsm-bin:
    desc: Downloads the wfsm tool binary from GitHub releases
    vars:
      TEMP_PATH: '{{ .TEMP_PATH | default "/tmp" }}'
      WFSM_BIN_PATH: '{{ .TEMP_PATH | default "/tmp" }}'
      WFSM_BIN_VERSION: 'v0.2.2'
    cmds:
      - |
        export WFSM_TAG={{.WFSM_BIN_VERSION}}
        export WFSM_TARGET={{.WFSM_BIN_PATH}};
        curl -L https://raw.githubusercontent.com/agntcy/workflow-srv-mgr/refs/heads/main/install.sh | bash

  wfsm:dir:push:manifest:
    desc: "Pushes the agent manifest to the directory"
    vars:
      MANIFEST_PATH: '{{ .MANIFEST_PATH | default "./assets/echo_agent.json" }}'
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'

    cmds:
      - task: parent:directory:k8s:port-forward:setup
      - defer: { task: parent:directory:k8s:port-forward:teardown }
      - echo "Pushing the agent manifest to the directory "
      - 'cp -R {{ .MANIFEST_PATH }} "{{ .TMP_PATH}}/manifest.json"'
      - '{{ .DIRCTL_BIN_PATH}}/dirctl push {{ .MANIFEST_PATH}} > "{{ .TMP_PATH}}/digest.json"'

  wfsm:deploy:manifest:
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'
    env:
      AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "xxx" }}'
      AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "yyy" }}'
      AZURE_OPENAI_API_VERSION: '{{ .AZURE_OPENAI_API_VERSION | default "2025-02-01-preview" }}'

    cmds:
      - task: parent:directory:k8s:port-forward:setup
      - defer: { task: parent:directory:k8s:port-forward:teardown }
      - '"{{ .TMP_PATH}}/wfsm" deploy --manifestPath="$(<{{ .TMP_PATH}}/digest.json)" --dryRun=false --platform=k8s &'
      - sleep 1




  wfsm:call:acp:
    desc: Calls the ACP API
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'

      AGENT_NAME:
        sh: |
          {{ .TMP_PATH }}/jq 'first(.extensions[]).name' {{ .TMP_PATH }}/manifest.json
      AGENT_ID:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="AGENT_ID").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_HOST:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="API_HOST").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_PORT:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="API_PORT").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_KEY:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].secretEnvs[] | select(.name=="API_KEY").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      AGENT_REPO:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].image.repository' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      AGENT_TAG:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].image.tag' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"

    cmds:
      - cmd: echo "Calling the ACP API"
      - cmd: echo Agent Name is {{ .AGENT_NAME }}
      - cmd: echo "AGENT_ID is {{ .AGENT_ID }}"
      - cmd: echo "API_HOST is {{ .API_HOST }}"
      - cmd: echo "API_PORT is {{ .API_PORT }}"
      - cmd: echo "API_KEY is {{ .API_KEY }}"
      - cmd: echo "AGENT_REPO is {{ .AGENT_REPO }}"
      - cmd: echo "AGENT_TAG is {{ .AGENT_TAG }}"
      - |
        kind load docker-image {{ .AGENT_REPO }}:{{ .AGENT_TAG}} --name {{ .KIND_CLUSTER_NAME }}
        sleep 90
        kubectl port-forward svc/echo-agent  {{ .API_PORT }} &
        sleep 3
        curl -X GET "http://localhost:{{ .API_PORT }}/agents/{{ .AGENT_ID }}" -H "accept: application/json" -H "x-api-key: {{ .API_KEY }}"



  wfsm:test:e2e:
    desc: Tests the wfsm deploy command using an agent manifest from the directory
    deps: [ wfsm:test:setup ]
    cmds:
      - task: wfsm:dir:push:manifest
      - task: wfsm:deploy:manifest
      - task: wfsm:call:acp
      - defer: { task: wfsm:test:teardown }

  default:
    cmd: task -l