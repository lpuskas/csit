# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true

vars:
  AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "" }}'
  AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "" }}'
  AZURE_OPENAI_API_VERSION: '{{ .AZURE_OPENAI_API_VERSION | default "2025-02-01-preview" }}'

  TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'

  ARCH:
    sh: |
      if [ "$ARCH" == "" ]; then
        uname -m
      else
        printf $ARCH
      fi
  OS:
    sh: |
      if [ "$OS" == "" ]; then
        uname -s
      else
        printf $OS
      fi
  WFSM_BIN_PATH:
    sh: |
      if [ "$WFSM_BIN_PATH" == "" ]; then
        printf "{{.TASKFILE_DIR}}/tools"
      else
        printf $WFSM_BIN_PATH
      fi

tasks:
  wfsm:install:yq:
    desc: Installs the yq tool
    requires:
      vars:
        - TMP_PATH
        - ARCH
        - OS
    vars:
      YQ_VERSION: 'v4.45.4'
      YQ_BINARY:
        sh: |
          if [[ "{{ .ARCH}}" == "x86_64" && "{{lower .OS}}" == "linux" ]]; then
            echo 'yq_{{ lower .OS }}_amd64'
          else
            echo 'yq_{{ lower .OS }}_{{ .ARCH}}'
          fi

    cmds:
      - echo "Installing yq ..."
      - curl -L -o "{{ .TMP_PATH}}/yq" "https://github.com/mikefarah/yq/releases/download/{{.YQ_VERSION}}/{{ .YQ_BINARY}}" && chmod +x "{{ .TMP_PATH}}/yq"

  wfsm:install:jq:
    desc: Installs the jq tool
    requires:
      vars:
        - TMP_PATH
        - ARCH
        - OS
    vars:
      JQ_VERSION: 'jq-1.7.1'

      JQ_BINARY:
        sh: |
          if [[ "{{ .ARCH}}" == "arm64" && "{{lower .OS}}" == "darwin" ]]; then
            echo 'jq-macos-{{ .ARCH}}'
          elif [[ "{{ .ARCH}}" == "x86_64" && "{{lower .OS}}" == "linux" ]]; then
            echo 'jq-{{ lower .OS}}-amd64'
          else
            echo 'jq-{{ lower .OS}}-{{ .ARCH}}'
          fi

    cmds:
      - echo "Installing jq"
      - curl -L -o "{{ .TMP_PATH}}/jq" "https://github.com/jqlang/jq/releases/download/{{ .JQ_VERSION }}/{{ .JQ_BINARY}}" && chmod +x "{{ .TMP_PATH}}/jq"

  wfsm:install:wfsm-bin:
    desc: Downloads the wfsm tool binary from GitHub releases
    requires:
      vars:
        - TMP_PATH
        - ARCH
        - OS
    vars:
       WFSM_BIN_PATH: '{{ .TEMP_PATH | default "/tmp" }}'
       WFSM_BIN_VERSION: 'v0.3.1'
    cmds:
      - |
        export WFSM_TAG={{.WFSM_BIN_VERSION}}
        export WFSM_TARGET={{.WFSM_BIN_PATH}};
        curl -L https://raw.githubusercontent.com/agntcy/workflow-srv-mgr/refs/heads/main/install.sh | bash

  wfsm:test:setup:
    desc: Sets up prerequisites for testing the wfsm
    cmds:
      - task: wfsm:install:wfsm-bin
      - task: wfsm:install:yq
      - task: wfsm:install:jq

  wfsm:test:teardown:
    desc: Cleans up after testing the wfsm
    vars:
      TMP_PATH: '{{ .TMP_PATH | default "/tmp" }}'

    cmds:
      - cmd: echo "Cleaning up wfsm test environment"
      - cmd: rm -rf "{{ .TMP_PATH}}/manifest.json"
      - cmd: rm -rf "{{ .TMP_PATH}}/digest.json"
      - cmd: rm -rf "{{ .TMP_PATH}}/wfsm"
      - cmd: rm -rf "{{ .TMP_PATH}}/yq"
      - cmd: rm -rf "{{ .TMP_PATH}}/jq"
      - cmd: rm -rf "{{ .TMP_PATH}}/dirctl"

  wfsm:directory:port-forward:setup:
    internal: true
    cmds:
      - kubectl port-forward svc/agntcy-dir-apiserver -n {{ .DIRECTORY_NAMESPACE }} 8888 &
      - sleep 1

  wfsm:port-forward:teardown:
    internal: true
    cmds:
      - kill -9 $(ps aux | grep port-forward | grep agntcy-dir-apiserver | awk '{print $2}') || true



  wfsm:dir:push:manifest:
    desc: "Pushes the agent manifest to the directory"
    requires:
      vars:
        - TMP_PATH
        - DIRCTL_BIN_PATH
        - MANIFEST_PATH

    vars:
      MANIFEST_PATH: '{{ .MANIFEST_PATH | default "./assets/echo_agent.json" }}'

    cmds:
      - task: wfsm:directory:port-forward:setup
      - defer: { task: wfsm:port-forward:teardown }
      - cmd: sleep 10
      - echo "Pushing the agent manifest to the directory "
      - 'cp -R {{ .MANIFEST_PATH }} "{{ .TMP_PATH}}/manifest.json"'
      - '{{ .DIRCTL_BIN_PATH}}/dirctl push {{ .MANIFEST_PATH}} > "{{ .TMP_PATH}}/digest.json"'

  wfsm:deploy:manifest:
    requires:
      vars:
        - TMP_PATH
    env:
      AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "xxx" }}'
      AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "yyy" }}'
      AZURE_OPENAI_API_VERSION: '{{ .AZURE_OPENAI_API_VERSION | default "2025-02-01-preview" }}'

    cmds:
      - task: wfsm:directory:port-forward:setup
      - defer: { task: wfsm:port-forward:teardown }
      - '"{{ .TMP_PATH}}/wfsm" deploy --manifestPath="$(<{{ .TMP_PATH}}/digest.json)" --platform=k8s'

  wfsm:start:agent:
    desc: Starts the agent ACP Workflow Server
    requires:
      vars:
        - TMP_PATH
        - WFSM_BIN_PATH

    cmds:
      - echo "Starting the agent ..."
      - task: wfsm:directory:port-forward:setup
      - defer: { task: wfsm:port-forward:teardown }
      - '"{{ .TMP_PATH}}/wfsm" deploy --manifestPath="$(<{{ .TMP_PATH}}/digest.json)" --platform=k8s --dryRun=false &'
      - sleep 30


  wfsm:set:acp:env:
    desc: Gathers the environment variables related to the current ACP Workflow Server deployment
    requires:
      vars:
        - TMP_PATH
    vars:
      AGENT_NAME:
        sh: |
          {{ .TMP_PATH }}/jq '.name' {{ .TMP_PATH }}/manifest.json
      AGENT_ID:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="AGENT_ID").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_HOST:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="API_HOST").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_PORT:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].env[] | select(.name=="API_PORT").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      API_KEY:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].secretEnvs[] | select(.name=="API_KEY").value' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      AGENT_REPO:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].image.repository' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"
      AGENT_TAG:
        sh: |
          "{{ .TMP_PATH }}/yq" e '.agents[0].image.tag' "{{ .HOME }}/.wfsm/{{ .AGENT_NAME}}/values-{{ .AGENT_NAME}}.yaml"

    cmds:
      - echo "export AGENT_NAME={{ .AGENT_NAME }}"
      - echo "export AGENT_ID={{ .AGENT_ID }}"
      - echo "export API_HOST={{ .API_HOST }}"
      - echo "export API_PORT={{ .API_PORT }}"
      - echo "export API_KEY={{ .API_KEY }}"
      - echo "export AGENT_REPO={{ .AGENT_REPO }}"
      - echo "export AGENT_TAG={{ .AGENT_TAG }}"

  wfsm:unset:acp:env:
    desc: "Unsets the environment variables related to the current ACP Workflow Server deployment. Usage:  eval $(task wfsm:unset:acp:env)"
    cmds:
      - echo "unset AGENT_NAME"
      - echo "unset AGENT_ID"
      - echo "unset API_HOST"
      - echo "unset API_PORT"
      - echo "unset API_KEY"
      - echo "unset AGENT_REPO"
      - echo "unset AGENT_TAG"

  wfsm:load:image:
    desc: Loads the agent image into the kind cluster
    requires:
      vars:
        - KIND_CLUSTER_NAME
    cmds:
      - |
        eval $(task wfsm:set:acp:env)
        kind load docker-image "${AGENT_REPO}:${AGENT_TAG}" --name "{{ .KIND_CLUSTER_NAME }}"

  wfsm:call:acp:
    desc: Calls the ACP API
    cmds:
      - echo "Calling the ACP API to get the agent details"
      - |
        eval $(task wfsm:set:acp:env)
        kubectl port-forward svc/org-agntcy-echo-agent "${API_PORT}" &
        sleep 3
        curl -X GET "http://localhost:${API_PORT}/agents/${AGENT_ID}" -H "accept: application/json" -H "x-api-key: ${API_KEY}"

  wfsm:test:e2e:
    desc: Tests the wfsm deploy command using an agent manifest from the directory
    deps: [ wfsm:test:setup ]
    cmds:
      - task: wfsm:dir:push:manifest
      - task: wfsm:deploy:manifest
      - task: wfsm:load:image
      - task: wfsm:start:agent
      - task: wfsm:call:acp
      - defer: { task: wfsm:test:teardown }

  default:
    cmd: task -l